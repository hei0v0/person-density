{"ast":null,"code":"var _jsxFileName = \"D:\\\\Zry\\\\Works\\\\person-density\\\\src\\\\pages\\\\logGraph\\\\LogGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ReactECharts from 'echarts-for-react';\nimport { cloneDeep } from 'lodash'; // 这里因为lodash版本不一样的问题所以引入方式和官网不一样\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LogGraph(props) {\n  _s();\n  const [number, setNumber] = useState(0);\n  const [curColor, setColor] = useState('');\n  const AREA = 23;\n  const DEFAULT_OPTION = {\n    title: {\n      text: '人员密度检测图'\n    },\n    tooltip: {\n      trigger: 'axis'\n    },\n    legend: {\n      data: ['最近人数', {\n        name: '当前密度',\n        itemStyle: {\n          color: 'white'\n        }\n      }]\n    },\n    toolbox: {\n      show: true,\n      feature: {\n        dataView: {\n          readOnly: false\n        },\n        restore: {},\n        saveAsImage: {}\n      }\n    },\n    grid: {\n      top: 60,\n      left: 30,\n      right: 60,\n      bottom: 30\n    },\n    dataZoom: {\n      show: false,\n      start: 0,\n      end: 100\n    },\n    xAxis: [{\n      type: 'category',\n      boundaryGap: true,\n      data: function () {\n        let now = new Date();\n        let res = [];\n        let len = 45;\n        while (len--) {\n          res.unshift(now.toLocaleTimeString().replace(/^\\D*/, ''));\n          now = new Date(now - 2000);\n        }\n        return res;\n      }()\n    }],\n    yAxis: [{\n      type: 'value',\n      scale: true,\n      name: '人数',\n      max: 400,\n      min: 0,\n      boundaryGap: [0.2, 0.2]\n    }, {\n      type: 'value',\n      scale: true,\n      name: '人员密度',\n      max: 20,\n      min: 0,\n      boundaryGap: [0.35, 0.35]\n    }],\n    series: [{\n      name: '当前密度',\n      type: 'bar',\n      // 直方图\n      yAxisIndex: 1,\n      itemStyle: {\n        borderRadius: 4,\n        // color: {\n        //     type: 'linear',\n        //     x: 0,\n        //     y: 0,\n        //     x2: 0,\n        //     y2: 1,\n        //     colorStops: [{\n        //         offset: 0, color: 'red' // 0% 处的颜色\n        //     }, {\n        //         offset: 1, color: 'blue' // 100% 处的颜色\n        //     }],\n        //     global: false // 缺省为 false\n        // },\n        color: function (idx) {\n          const color = checkDensity(idx.value);\n          setColor(color);\n          return color;\n        },\n        //鼠标悬停时：\n        emphasis: {\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\n        }\n      },\n      animationEasing: 'elasticOut',\n      animationDelay: function (idx) {\n        return idx * 10;\n      },\n      animationDelayUpdate: function (idx) {\n        return idx * 10;\n      },\n      data: function () {\n        let res = [];\n        let len = 45;\n        while (len--) {\n          res.push(parseFloat((number / AREA).toFixed(2)));\n        }\n        return res;\n      }()\n    }, {\n      name: '最近人数',\n      type: 'line',\n      // 折线图\n      data: function () {\n        let res = [];\n        let len = 45;\n        while (len--) {\n          res.push(number);\n        }\n        return res;\n      }()\n    }]\n  };\n  const [option, setOption] = useState(DEFAULT_OPTION);\n  const {\n    isEnd,\n    active\n  } = props;\n  const checkDensity = curDensity => {\n    if (curDensity >= 0 && curDensity <= 5.26) {\n      return 'rgba(0, 0, 255, 0.8)';\n    }\n    if (curDensity > 5.26 && curDensity <= 7.6) {\n      return 'rgba(255, 255, 0, 0.8)';\n    }\n    if (curDensity > 7.6) {\n      return 'rgba(255, 0, 0, 0.8)';\n    }\n  };\n  function fetchNewData() {\n    // console.log(number);\n    const axisData = new Date().toLocaleTimeString().replace(/^\\D*/, '');\n    const newOption = cloneDeep(option); // 一定要进行深拷贝\n    newOption.title.text = '密度图' + new Date().getSeconds();\n    const data0 = newOption.series[0].data;\n    const data1 = newOption.series[1].data;\n    data0.shift(); // 删除第一个元素\n    data0.push(parseFloat((number / AREA).toFixed(2))); // 在数组末尾添加元素\n    data1.shift(); // 删除第一个元素\n    data1.push(number); // 在数组末尾添加元素\n\n    newOption.xAxis[0].data.shift(); // 删除第一个元素\n    newOption.xAxis[0].data.push(axisData); // 在数组末尾添加元素\n\n    if (number > 0) {\n      newOption.legend.data[1].itemStyle.color = curColor;\n    }\n    setOption(newOption);\n  }\n  useEffect(() => {\n    setNumber(props.number);\n  }, [props.number]);\n  useEffect(() => {\n    if (!isEnd) {\n      const timer = setInterval(() => {\n        fetchNewData();\n      }, 500);\n      return () => clearInterval(timer);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ReactECharts, {\n    option: option,\n    style: active ? {\n      width: 600,\n      height: 480,\n      minWidth: 300,\n      transition: \"0.5s\"\n    } : {\n      width: 600,\n      height: 480,\n      minWidth: 300\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 12\n  }, this);\n}\n_s(LogGraph, \"9cnn9aJDWzsAdajgQZ3xvj3rK4A=\");\n_c = LogGraph;\n;\nvar _c;\n$RefreshReg$(_c, \"LogGraph\");","map":{"version":3,"names":["React","useState","useEffect","ReactECharts","cloneDeep","LogGraph","props","number","setNumber","curColor","setColor","AREA","DEFAULT_OPTION","title","text","tooltip","trigger","legend","data","name","itemStyle","color","toolbox","show","feature","dataView","readOnly","restore","saveAsImage","grid","top","left","right","bottom","dataZoom","start","end","xAxis","type","boundaryGap","now","Date","res","len","unshift","toLocaleTimeString","replace","yAxis","scale","max","min","series","yAxisIndex","borderRadius","idx","checkDensity","value","emphasis","shadowBlur","shadowOffsetX","shadowColor","animationEasing","animationDelay","animationDelayUpdate","push","parseFloat","toFixed","option","setOption","isEnd","active","curDensity","fetchNewData","axisData","newOption","getSeconds","data0","data1","shift","timer","setInterval","clearInterval","width","height","minWidth","transition"],"sources":["D:/Zry/Works/person-density/src/pages/logGraph/LogGraph.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactECharts from 'echarts-for-react';\r\nimport { cloneDeep } from 'lodash';// 这里因为lodash版本不一样的问题所以引入方式和官网不一样\r\nimport \"./index.css\"\r\n\r\nexport default function LogGraph(props) {\r\n    const [number, setNumber] = useState(0);\r\n    const [curColor, setColor] = useState('');\r\n    const AREA = 23;\r\n\r\n    const DEFAULT_OPTION = {\r\n        title: {\r\n            text: '人员密度检测图',\r\n        },\r\n        tooltip: {\r\n            trigger: 'axis'\r\n        },\r\n        legend: {\r\n            data: ['最近人数', {\r\n                name: '当前密度',\r\n                itemStyle: {\r\n                    color: 'white'\r\n                }\r\n            }]\r\n        },\r\n        toolbox: {\r\n            show: true,\r\n            feature: {\r\n                dataView: { readOnly: false },\r\n                restore: {},\r\n                saveAsImage: {}\r\n            }\r\n        },\r\n        grid: {\r\n            top: 60,\r\n            left: 30,\r\n            right: 60,\r\n            bottom: 30\r\n        },\r\n        dataZoom: {\r\n            show: false,\r\n            start: 0,\r\n            end: 100\r\n        },\r\n        xAxis: [\r\n            {\r\n                type: 'category',\r\n                boundaryGap: true,\r\n                data: (function () {\r\n                    let now = new Date();\r\n                    let res = [];\r\n                    let len = 45;\r\n                    while (len--) {\r\n                        res.unshift(now.toLocaleTimeString().replace(/^\\D*/, ''));\r\n                        now = new Date(now - 2000);\r\n                    }\r\n                    return res;\r\n                })()\r\n            }\r\n        ],\r\n        yAxis: [\r\n            {\r\n                type: 'value',\r\n                scale: true,\r\n                name: '人数',\r\n                max: 400,\r\n                min: 0,\r\n                boundaryGap: [0.2, 0.2]\r\n            },\r\n            {\r\n                type: 'value',\r\n                scale: true,\r\n                name: '人员密度',\r\n                max: 20,\r\n                min: 0,\r\n                boundaryGap: [0.35, 0.35]\r\n            }\r\n        ],\r\n        series: [\r\n            {\r\n                name: '当前密度',\r\n                type: 'bar', // 直方图\r\n                yAxisIndex: 1,\r\n                itemStyle: {\r\n                    borderRadius: 4,\r\n                    // color: {\r\n                    //     type: 'linear',\r\n                    //     x: 0,\r\n                    //     y: 0,\r\n                    //     x2: 0,\r\n                    //     y2: 1,\r\n                    //     colorStops: [{\r\n                    //         offset: 0, color: 'red' // 0% 处的颜色\r\n                    //     }, {\r\n                    //         offset: 1, color: 'blue' // 100% 处的颜色\r\n                    //     }],\r\n                    //     global: false // 缺省为 false\r\n                    // },\r\n                    color: function (idx) {\r\n                        const color = checkDensity(idx.value);\r\n                        setColor(color);\r\n                        return color;\r\n                    },\r\n                    //鼠标悬停时：\r\n                    emphasis: {\r\n                        shadowBlur: 10,\r\n                        shadowOffsetX: 0,\r\n                        shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                    }\r\n                },\r\n                animationEasing: 'elasticOut',\r\n                animationDelay: function (idx) {\r\n                    return idx * 10;\r\n                },\r\n                animationDelayUpdate: function (idx) {\r\n                    return idx * 10;\r\n                },\r\n                data: (function () {\r\n                    let res = [];\r\n                    let len = 45;\r\n                    while (len--) {\r\n                        res.push(parseFloat((number / AREA).toFixed(2)));\r\n                    }\r\n                    return res;\r\n                })()\r\n            },\r\n            {\r\n                name: '最近人数',\r\n                type: 'line', // 折线图\r\n                data: (function () {\r\n                    let res = [];\r\n                    let len = 45;\r\n                    while (len--) {\r\n                        res.push(number);\r\n                    }\r\n                    return res;\r\n                })()\r\n            }\r\n        ]\r\n    };\r\n\r\n    const [option, setOption] = useState(DEFAULT_OPTION);\r\n    const { isEnd, active } = props;\r\n    const checkDensity = (curDensity) => {\r\n        if (curDensity >= 0 && curDensity <= 5.26) {\r\n            return 'rgba(0, 0, 255, 0.8)'\r\n        }\r\n        if (curDensity > 5.26 && curDensity <= 7.6) {\r\n            return 'rgba(255, 255, 0, 0.8)'\r\n        }\r\n        if (curDensity > 7.6) {\r\n            return 'rgba(255, 0, 0, 0.8)'\r\n        }\r\n    }\r\n    \r\n    function fetchNewData() {\r\n        // console.log(number);\r\n        const axisData = (new Date()).toLocaleTimeString().replace(/^\\D*/, '');\r\n        const newOption = cloneDeep(option); // 一定要进行深拷贝\r\n        newOption.title.text = '密度图' + new Date().getSeconds();\r\n        const data0 = newOption.series[0].data;\r\n        const data1 = newOption.series[1].data;\r\n\r\n        data0.shift(); // 删除第一个元素\r\n        data0.push(parseFloat((number / AREA).toFixed(2)));// 在数组末尾添加元素\r\n        data1.shift();// 删除第一个元素\r\n        data1.push(number);// 在数组末尾添加元素\r\n\r\n        newOption.xAxis[0].data.shift();// 删除第一个元素\r\n        newOption.xAxis[0].data.push(axisData);// 在数组末尾添加元素\r\n\r\n        if (number > 0) {\r\n            newOption.legend.data[1].itemStyle.color = curColor\r\n        }\r\n        setOption(newOption);\r\n    }\r\n    useEffect(() => {\r\n        setNumber(props.number);\r\n    }, [props.number])\r\n\r\n    useEffect(() => {\r\n        if (!isEnd) {\r\n            const timer = setInterval(() => {\r\n                fetchNewData();\r\n            }, 500);\r\n            return () => clearInterval(timer);\r\n        }\r\n    });\r\n    return <ReactECharts\r\n        option={option}\r\n        style={active ?\r\n            { width: 600, height: 480, minWidth: 300, transition: \"0.5s\" } :\r\n            { width: 600, height: 480, minWidth: 300 }}\r\n    />;\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}