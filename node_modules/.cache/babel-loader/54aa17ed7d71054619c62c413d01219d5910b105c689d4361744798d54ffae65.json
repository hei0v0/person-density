{"ast":null,"code":"var _jsxFileName = \"D:\\\\Zry\\\\Works\\\\person-density\\\\src\\\\compoenets\\\\ReactLeftLineChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport ReactECharts from \"echarts-for-react\";\nimport { cloneDeep } from \"lodash\"; // 这里因为lodash版本不一样的问题所以引入方式和官网不一样\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ReactLeftLineChart(props) {\n  _s();\n  const data = {\n    year: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n  };\n  const {\n    number,\n    crowded,\n    isEnd\n  } = props;\n  const fetchNewData = () => {\n    const axisData = new Date().toLocaleTimeString().replace(/^\\D*/, \"\");\n    const newOption = cloneDeep(option); // 一定要进行深拷贝\n    const data0 = newOption.series[0].data;\n    const data1 = newOption.series[1].data;\n    data0.shift(); // 删除第一个元素\n    data0.push(number); // 在数组末尾添加元素\n    data1.shift(); // 删除第一个元素\n    data1.push(crowded); // 在数组末尾添加元素\n    newOption.xAxis[0].data.shift(); // 删除第一个元素\n    newOption.xAxis[0].data.push(axisData); // 在数组末尾添加元素\n\n    setOption(newOption);\n  };\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (!isEnd) {\n        fetchNewData();\n      }\n    }, 500);\n    return () => clearInterval(timer);\n  });\n  const DEFAULT_OPTION = {\n    color: [\"#00f2f1\", \"#ed3f35\"],\n    tooltip: {\n      trigger: \"axis\",\n      axisPointer: {\n        type: \"shadow\"\n      }\n    },\n    legend: {\n      // 修饰图例文字的颜色\n      textStyle: {\n        color: \"#fff\"\n      },\n      // 如果series 里面设置了name，此时图例组件的data可以省略\n      data: [\"当前人数\", \"密集人数\"]\n    },\n    grid: {\n      top: 40,\n      left: 40,\n      right: 30,\n      bottom: 30\n    },\n    xAxis: [{\n      type: \"category\",\n      boundaryGap: true,\n      data: function () {\n        let now = new Date();\n        let res = [];\n        let len = 15;\n        while (len--) {\n          res.unshift(now.toLocaleTimeString().replace(/^\\D*/, \"\"));\n          now = new Date(now - 2000);\n        }\n        return res;\n      }(),\n      axisLine: {\n        // x轴线的颜色以及宽度\n        show: true,\n        lineStyle: {\n          color: \"#fff\",\n          width: 0,\n          type: \"solid\"\n        }\n      },\n      axisTick: {\n        show: false\n      },\n      axisLabel: {\n        //x轴文字的配置\n        show: true,\n        textStyle: {\n          color: \"#fff\"\n        }\n      },\n      splitLine: {\n        //分割线配置\n        show: false,\n        lineStyle: {\n          color: \"#fff\"\n        }\n      }\n    }],\n    yAxis: [{\n      type: \"value\",\n      min: 0,\n      boundaryGap: [0.2, 0.2],\n      nameTextStyle: {\n        //y轴上方单位的颜色\n        color: \"#fff\"\n      },\n      axisLabel: {\n        //y轴文字的配置\n        textStyle: {\n          color: \"#fff\",\n          margin: 15\n        }\n        // formatter: '{value} %'//y轴的每一个刻度值后面加上‘%’号\n      },\n\n      axisTick: {\n        show: false\n      },\n      axisLine: {\n        //y轴线的颜色以及宽度\n        show: false,\n        lineStyle: {\n          color: \"#fff\",\n          width: 1,\n          type: \"solid\"\n        }\n      }\n    }],\n    series: [{\n      name: \"当前人数\",\n      type: \"line\",\n      // 是否让线条圆滑显示\n      smooth: true,\n      yAxisIndex: 0,\n      animationEasing: \"elasticOut\",\n      animationDelay: function (idx) {\n        return idx * 10;\n      },\n      animationDelayUpdate: function (idx) {\n        return idx * 10;\n      },\n      data: data.year[0]\n    }, {\n      name: \"密集人数\",\n      type: \"line\",\n      smooth: true,\n      data: data.year[1]\n    }]\n  };\n  const [option, setOption] = useState(DEFAULT_OPTION);\n  return /*#__PURE__*/_jsxDEV(ReactECharts, {\n    option: option,\n    style: {\n      width: 300,\n      height: 300,\n      minWidth: 300\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}\n_s(ReactLeftLineChart, \"tlCzAa2rfXcuyp7R4FMQKnM8t8s=\");\n_c = ReactLeftLineChart;\nvar _c;\n$RefreshReg$(_c, \"ReactLeftLineChart\");","map":{"version":3,"names":["React","useState","useEffect","ReactECharts","cloneDeep","ReactLeftLineChart","props","data","year","number","crowded","isEnd","fetchNewData","axisData","Date","toLocaleTimeString","replace","newOption","option","data0","series","data1","shift","push","xAxis","setOption","timer","setInterval","clearInterval","DEFAULT_OPTION","color","tooltip","trigger","axisPointer","type","legend","textStyle","grid","top","left","right","bottom","boundaryGap","now","res","len","unshift","axisLine","show","lineStyle","width","axisTick","axisLabel","splitLine","yAxis","min","nameTextStyle","margin","name","smooth","yAxisIndex","animationEasing","animationDelay","idx","animationDelayUpdate","height","minWidth"],"sources":["D:/Zry/Works/person-density/src/compoenets/ReactLeftLineChart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactECharts from \"echarts-for-react\";\r\nimport { cloneDeep } from \"lodash\"; // 这里因为lodash版本不一样的问题所以引入方式和官网不一样\r\nexport default function ReactLeftLineChart(props) {\r\n  const data = {\r\n    year: [\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    ],\r\n  };\r\n  const { number, crowded, isEnd } = props;\r\n\r\n  const fetchNewData = () => {\r\n    const axisData = new Date().toLocaleTimeString().replace(/^\\D*/, \"\");\r\n    const newOption = cloneDeep(option); // 一定要进行深拷贝\r\n    const data0 = newOption.series[0].data;\r\n    const data1 = newOption.series[1].data;\r\n    data0.shift(); // 删除第一个元素\r\n    data0.push(number); // 在数组末尾添加元素\r\n    data1.shift(); // 删除第一个元素\r\n    data1.push(crowded); // 在数组末尾添加元素\r\n    newOption.xAxis[0].data.shift(); // 删除第一个元素\r\n    newOption.xAxis[0].data.push(axisData); // 在数组末尾添加元素\r\n\r\n    setOption(newOption);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      if (!isEnd) {\r\n        fetchNewData();\r\n      }\r\n    }, 500);\r\n    return () => clearInterval(timer);\r\n  });\r\n\r\n  const DEFAULT_OPTION = {\r\n    color: [\"#00f2f1\", \"#ed3f35\"],\r\n    tooltip: {\r\n      trigger: \"axis\",\r\n      axisPointer: {\r\n        type: \"shadow\",\r\n      },\r\n    },\r\n    legend: {\r\n      // 修饰图例文字的颜色\r\n      textStyle: {\r\n        color: \"#fff\",\r\n      },\r\n      // 如果series 里面设置了name，此时图例组件的data可以省略\r\n      data: [\"当前人数\", \"密集人数\"],\r\n    },\r\n    grid: {\r\n      top: 40,\r\n      left: 40,\r\n      right: 30,\r\n      bottom: 30,\r\n    },\r\n    xAxis: [\r\n      {\r\n        type: \"category\",\r\n        boundaryGap: true,\r\n        data: (function () {\r\n          let now = new Date();\r\n          let res = [];\r\n          let len = 15;\r\n          while (len--) {\r\n            res.unshift(now.toLocaleTimeString().replace(/^\\D*/, \"\"));\r\n            now = new Date(now - 2000);\r\n          }\r\n          return res;\r\n        })(),\r\n        axisLine: {\r\n          // x轴线的颜色以及宽度\r\n          show: true,\r\n          lineStyle: {\r\n            color: \"#fff\",\r\n            width: 0,\r\n            type: \"solid\",\r\n          },\r\n        },\r\n        axisTick: {\r\n          show: false,\r\n        },\r\n        axisLabel: {\r\n          //x轴文字的配置\r\n          show: true,\r\n          textStyle: {\r\n            color: \"#fff\",\r\n          },\r\n        },\r\n        splitLine: {\r\n          //分割线配置\r\n          show: false,\r\n          lineStyle: {\r\n            color: \"#fff\",\r\n          },\r\n        },\r\n      },\r\n    ],\r\n    yAxis: [\r\n      {\r\n        type: \"value\",\r\n        min: 0,\r\n        boundaryGap: [0.2, 0.2],\r\n        nameTextStyle: {\r\n          //y轴上方单位的颜色\r\n          color: \"#fff\",\r\n        },\r\n        axisLabel: {\r\n          //y轴文字的配置\r\n          textStyle: {\r\n            color: \"#fff\",\r\n            margin: 15,\r\n          },\r\n          // formatter: '{value} %'//y轴的每一个刻度值后面加上‘%’号\r\n        },\r\n        axisTick: {\r\n          show: false,\r\n        },\r\n        axisLine: {\r\n          //y轴线的颜色以及宽度\r\n          show: false,\r\n          lineStyle: {\r\n            color: \"#fff\",\r\n            width: 1,\r\n            type: \"solid\",\r\n          },\r\n        },\r\n      },\r\n    ],\r\n    series: [\r\n      {\r\n        name: \"当前人数\",\r\n        type: \"line\",\r\n        // 是否让线条圆滑显示\r\n        smooth: true,\r\n        yAxisIndex: 0,\r\n        animationEasing: \"elasticOut\",\r\n        animationDelay: function (idx) {\r\n          return idx * 10;\r\n        },\r\n        animationDelayUpdate: function (idx) {\r\n          return idx * 10;\r\n        },\r\n        data: data.year[0],\r\n      },\r\n      {\r\n        name: \"密集人数\",\r\n        type: \"line\",\r\n        smooth: true,\r\n        data: data.year[1],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const [option, setOption] = useState(DEFAULT_OPTION);\r\n\r\n  return (\r\n    <ReactECharts\r\n      option={option}\r\n      style={{ width: 300, height: 300, minWidth: 300 }}\r\n    />\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}